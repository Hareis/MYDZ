using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MYDZ.Common;
using System.Web.Mvc;
using MYDZ.Business.Business_Logic.Goods;
using MYDZ.Entity.Goods;
using MYDZ.Entity.ClientUser;
using MYDZ.Business.Business_Logic.Shop;
using MYDZ.Entity.Shop;
using MYDZ.Business.Business_Logic.ItemCats;
using MYDZ.Entity.ItemCats;
using System.Threading.Tasks;
using System.IO;

namespace MYDZ.WebUI.Merchandise
{
    public class MerchandiseController : BaseController
    {
        InitGoodsInfo goodsinfo = new InitGoodsInfo();
        InitShopInfo isi = new InitShopInfo();
        GetItemCat gic = new GetItemCat();
        /// <summary>
        /// 出售中的商品
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public ViewResult OnSale()
        {
            tbClientUser clientuser = GetUser("UserInfo");
            ViewData["SPLM"] = isi.ReutrnSPLM(clientuser.UserNick);
            ViewData["DPLM"] = isi.ReturnDPLM();
            return View();
        }

        /// <summary>
        /// 仓库中的商品
        /// </summary>
        /// <returns></returns>
        public ViewResult InStock()
        {
            tbClientUser clientuser = GetUser("UserInfo");
            ViewData["SPLM"] = isi.ReutrnSPLM(clientuser.UserNick);
            ViewData["DPLM"] = isi.ReturnDPLM();
            return View();
        }

        #region 在售商品管理
        /// <summary>
        /// 批量下架商品
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public Task<ActionResult> SetBatchUnShelve(string ListGoodId)
        {
            tbClientUser clientuser = GetUser("UserInfo");
            return Task.Factory.StartNew(() =>
            {
                goodsinfo.BatchUnShelve(clientuser.UserShops[0].SessionKey, ListGoodId);
                AsyncManager.Timeout = 5000;
            }).ContinueWith<ActionResult>(task =>
            {
                Response.End();
                Response.Redirect("/Merchandise/OnSale.html");
                return View();
            });
        }

        //选择类目属性
        public ViewResult ChooseItemprop(string Cids = null)
        {
            tbClientUser clientuser = GetUser("UserInfo");
            SellerAuthorize sa = new SellerAuthorize();
            sa = gic.GetAuthorizeItemcat(clientuser.UserShops[0].SessionKey);
            ViewData["ListCats"] = sa.ItemCats;
            return View();
        }

        [HttpPost]
        /// <summary>
        /// 通过Cid获取属性
        /// </summary>
        /// <returns></returns>
        public JsonResult GetItencatsByCid(string Cids, string ParentCid)
        {
            tbClientUser clientuser = GetUser("UserInfo");
            List<ItemCat> result = gic.GetItemcats(Cids, ParentCid);
            return Json(result);
        }


        /// <summary>
        /// 添加商品
        /// </summary>
        /// <returns></returns>
        public ViewResult AddGoods(string SelectItemCid, string Pvs, string Type, string AttrKeys)
        {
            List<ItemProp> list = new List<ItemProp>();
            list = gic.GetItemprops(SelectItemCid);
            List<PropValue> listprop = gic.GetItemPropValues(SelectItemCid, Pvs, Type, AttrKeys);
            ViewData["ListItemProp"] = list;
            return View();
        }


        /// <summary>
        /// 批量修改
        /// </summary>
        /// <returns></returns>
        public ViewResult SetBatchEdit()
        {
            return View();
        }

        /// <summary>
        /// 类目
        /// </summary>
        /// <returns></returns>
        public ViewResult Category()
        {
            tbClientUser clientuser = GetUser("UserInfo");
            ViewData["SPLM"] = isi.ReutrnSPLM(clientuser.UserNick);
            return View();
        }

        /// <summary>
        /// 编码
        /// </summary>
        /// <returns></returns>
        public ViewResult Coding()
        {
            return View();
        }

        /// <summary>
        /// 描述
        /// </summary>
        /// <returns></returns>
        public ViewResult Describe()
        {
            return View();
        }

        /// <summary>
        /// 运费
        /// </summary>
        /// <returns></returns>
        public ViewResult Freight()
        {
            tbClientUser clientuser = GetUser("UserInfo");
            List<DeliveryTemplate> list = goodsinfo.GetDeliveryTemplates(clientuser.UserShops[0].SessionKey);
            ViewData["list"] = list;
            return View();
        }

        /// <summary>
        /// 热点
        /// </summary>
        /// <returns></returns>
        public ViewResult HotDot()
        {
            return View();
        }


        /// <summary>
        /// 库存
        /// </summary>
        /// <returns></returns>
        public ViewResult Stock()
        {
            return View();
        }

        /// <summary>
        /// 标题
        /// </summary>
        /// <returns></returns>
        public ViewResult Title()
        {
            return View();
        }

        [HttpPost]
        /// <summary>
        /// 批量修改商品信息
        /// </summary>
        /// <returns></returns>
        public Task<ActionResult> SetupdateGoods(ItemUpdate goods)
        {
            tbClientUser clientuser = GetUser("UserInfo");
            string ErrorMsg = string.Empty;
            return Task.Factory.StartNew(() =>
            {
                bool result = false;
                List<string> errorMsg = new List<string>();
                goodsinfo.simpleupdategoods(clientuser.UserShops[0].SessionKey, goods, out errorMsg);
                AsyncManager.Timeout = 5000;
                AsyncManager.Parameters["content"] = result;
            }).ContinueWith<ActionResult>(task =>
            {
                string errorMsg = (string)AsyncManager.Parameters["content"];
                return Json(new { ErrorMsg = errorMsg });
            });
        }

        [HttpPost]
        /// <summary>
        /// 批量修改商品库存
        /// </summary>
        /// <returns></returns>
        public Task<ActionResult> SetUpdateGoodsStoke(ItemQuantityUpdate goods)
        {

            tbClientUser clientuser = GetUser("UserInfo");
            return Task.Factory.StartNew(() =>
            {
                List<string> errorMsgs;
                goodsinfo.UpdateStoke(clientuser.UserShops[0].SessionKey, goods, out errorMsgs);
                AsyncManager.Timeout = 5000;
                AsyncManager.Parameters["content"] = errorMsgs;
            }).ContinueWith<ActionResult>(task =>
            {
                List<string> errorMsg = (List<string>)AsyncManager.Parameters["content"];
                return Json(new { ErrorMsg = errorMsg });
            });
        }

        /// <summary>
        /// 批量修改商品标题
        /// </summary>
        /// <param name="goods"></param>
        /// <returns></returns>
        [HttpPost]
        public Task<ActionResult> updateGoodsTitle(ItemUpdate goods)
        {
            tbClientUser clientuser = GetUser("UserInfo");
            string ErrorMsg = string.Empty;
            return Task.Factory.StartNew(() =>
            {
                bool result = false;
                List<string> errorMsg = new List<string>();
                goodsinfo.updateGoodsTitle(goods, clientuser.UserShops[0].SessionKey, out errorMsg);
                AsyncManager.Timeout = 5000;
                AsyncManager.Parameters["content"] = result;
            }).ContinueWith<ActionResult>(task =>
            {
                string errorMsg = (string)AsyncManager.Parameters["content"];
                return Json(new { ErrorMsg = errorMsg });
            });
        }
        /// <summary>
        /// 批量更新商家编码
        /// </summary>
        /// <param name="goods"></param>
        /// <returns></returns>
        public Task<ActionResult> Updatecoding(ItemUpdate goods)
        {
            tbClientUser clientuser = GetUser("UserInfo");
            List<string> errorMsg;
            return Task.Factory.StartNew(() =>
            {
                errorMsg = new List<string>();
                goodsinfo.Updatecoding(goods, clientuser.UserShops[0].SessionKey, out errorMsg);
                AsyncManager.Timeout = 5000;
                AsyncManager.Parameters["content"] = errorMsg;
            }).ContinueWith<ActionResult>(task =>
            {
                errorMsg = new List<string>();
                errorMsg = (List<string>)AsyncManager.Parameters["content"];
                return Json(new { ErrorMsg = errorMsg });
            });
        }
        /// <summary>
        /// 批量更新卖点信息
        /// </summary>
        /// <param name="goods"></param>
        /// <returns></returns>
        public Task<ActionResult> Updatesellerpoint(ItemUpdate goods)
        {
            tbClientUser clientuser = GetUser("UserInfo");
            List<string> errorMsg;
            return Task.Factory.StartNew(() =>
            {
                errorMsg = new List<string>();
                goodsinfo.UpdateHotdot(goods, clientuser.UserShops[0].SessionKey, out errorMsg);
                AsyncManager.Timeout = 5000;
                AsyncManager.Parameters["content"] = errorMsg;
            }).ContinueWith<ActionResult>(task =>
            {
                errorMsg = new List<string>();
                errorMsg = (List<string>)AsyncManager.Parameters["content"];
                return Json(new { ErrorMsg = errorMsg });
            });
        }

        /// <summary>
        /// 商品上架
        /// </summary>
        /// <param name="ListGoodsId"></param>
        /// <returns></returns>
        public Task<ActionResult> GoodsShelf(string ListGoodsId, string ShelfGoodsNum = "0")
        {
            tbClientUser clientuser = GetUser("UserInfo");
            List<string> errorMsgs;
            return Task.Factory.StartNew(() =>
            {
                errorMsgs = new List<string>();
                goodsinfo.GoodsShelf(clientuser.UserShops[0].SessionKey, ListGoodsId, ShelfGoodsNum, out errorMsgs);
                AsyncManager.Timeout = 5000;
                AsyncManager.Parameters["content"] = errorMsgs;
            }).ContinueWith<ActionResult>(task =>
            {
                errorMsgs = new List<string>();
                errorMsgs = (List<string>)AsyncManager.Parameters["content"];
                return Json(new { ErrorMsg = errorMsgs });
            });
        }

        /// <summary>
        /// 刪除商品
        /// </summary>
        /// <param name="ListGoodsId"></param>
        /// <returns></returns>
        public Task<ActionResult> GoodsDeleteGoods(string ListGoodsId)
        {
            tbClientUser clientuser = GetUser("UserInfo");
            return Task.Factory.StartNew(() =>
            {
                goodsinfo.DeleteGoods(ListGoodsId, clientuser.UserShops[0].SessionKey);
                AsyncManager.Timeout = 5000;
            }).ContinueWith<ActionResult>(task =>
            {
                return Json("");
            });
        }

        /// <summary>
        /// 批量更新商品描述
        /// </summary>
        /// <param name="goods"></param>
        /// <returns></returns>
        public Task<ActionResult> UpdateGoodsDesc(ItemUpdate goods)
        {
            tbClientUser clientuser = GetUser("UserInfo");
            List<string> errorMsg;
            return Task.Factory.StartNew(() =>
            {
                errorMsg = new List<string>();
                goodsinfo.UpdateGoodsDesc(goods, clientuser.UserShops[0].SessionKey, out errorMsg);
                AsyncManager.Parameters["content"] = errorMsg;
            }).ContinueWith<ActionResult>(task =>
            {
                errorMsg = new List<string>();
                errorMsg = (List<string>)AsyncManager.Parameters["content"];
                return Json(new { ErrorMsg = errorMsg });
            });
        }

        /// <summary>
        /// 查找在线商品
        /// </summary>
        /// <param name="QueryStr"></param>
        /// <returns></returns>
        private IList<Item> SearchGoodsOnsales(ref int totalNum, MYDZ.Entity.Goods.QueryCriteriaForOnSales QueryStr = null)
        {
            IList<Item> list = null;
            tbClientUser clientuser = GetUser("UserInfo");
            string Type = null;
            list = goodsinfo.ReturnOnsalesByCriteria(clientuser.UserShops[0].SessionKey.ToString(), ref totalNum, QueryStr);
            return list;
        }

        /// <summary>
        /// 查找仓库商品
        /// </summary>
        /// <param name="QueryStr"></param>
        /// <returns></returns>
        private IList<Item> SearchGoodsInventory(ref int totalNum, MYDZ.Entity.Goods.QueryCriteriaForInventory QueryStr = null)
        {
            IList<Item> list = null;
            tbClientUser clientuser = GetUser("UserInfo");
            list = goodsinfo.ReturnInventoryByCriteria(clientuser.UserShops[0].SessionKey.ToString(), ref totalNum, QueryStr);
            return list;
        }

        /// <summary>
        /// 显示和查找在售商品
        /// </summary>
        /// <param name="QueryStr"></param>
        /// <returns></returns>
        [HttpPost]
        public ViewResult SHowGoodsOnsales(MYDZ.Entity.Goods.QueryCriteriaForOnSales QueryStr = null)
        {
            if (QueryStr != null)
            {
                string SellerCids = Request.Form["SellerCids"];
                QueryStr.SellerCids = SellerCids;
            }
            IList<Item> result = null;
            int totalNum = 0;
            result = (SearchGoodsOnsales(ref totalNum, QueryStr));
            ViewBag.totalNum = totalNum;
            return View(result);
        }
        /// <summary>
        /// 显示和查找仓库中商品
        /// </summary>
        /// <param name="QueryStr"></param>
        /// <returns></returns>
        [HttpPost]
        public ViewResult SHowGoodsInventory(MYDZ.Entity.Goods.QueryCriteriaForInventory QueryStr)
        {
            IList<Item> result = null;
            int totalNum = 0;
            result = (SearchGoodsInventory(ref totalNum, QueryStr));
            ViewBag.totalNum = totalNum;
            return View(result);
        }

        /// <summary>
        /// 返回授权的类目列表
        /// </summary>
        /// <returns></returns>
        public List<ItemCat> AuthorizeItemcat(string token)
        {
            tbClientUser clientuser = GetUser("UserInfo");
            SellerAuthorize cats = new SellerAuthorize();
            cats = gic.GetAuthorizeItemcat(token);
            return cats.ItemCats;
        }


    }
}
        #endregion
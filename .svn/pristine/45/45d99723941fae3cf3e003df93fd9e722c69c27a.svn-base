using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MYDZ.Common;
using System.Web.Mvc;
using MYDZ.Business.Business_Logic.Goods;
using MYDZ.Entity.Goods;
using MYDZ.Entity.ClientUser;
using MYDZ.Business.Business_Logic.Shop;
using MYDZ.Entity.Shop;
using MYDZ.Business.Business_Logic.ItemCats;

namespace MYDZ.WebUI.Merchandise
{
    public class MerchandiseController : BaseController
    {
        InitGoodsInfo goodsinfo = new InitGoodsInfo();
        InitShopInfo isi = new InitShopInfo();
        /// <summary>
        /// 出售中的商品
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public ViewResult OnSale()
        {
            tbClientUser clientuser = GetUser("UserInfo");
            ViewData["SPLM"] = isi.ReutrnSPLM(clientuser.UserNick);
            ViewData["DPLM"] = isi.ReturnDPLM();
            return View();
        }

        /// <summary>
        /// 仓库中的商品
        /// </summary>
        /// <returns></returns>
        public ViewResult InStock()
        {
            return View();
        }
        /// <summary>
        /// 显示和查找在售商品
        /// </summary>
        /// <param name="QueryStr"></param>
        /// <returns></returns>
        [HttpPost]
        public ViewResult SHowGoodsOnsales(MYDZ.Entity.Goods.QueryCriteriaForOnSales QueryStr = null)
        {
            if (QueryStr != null)
            {
                string SellerCids = Request.Form["SellerCids"];
                QueryStr.SellerCids = SellerCids;
            }
            IList<Item> result = null;
            int totalNum = 0;
            result = (SearchGoodsOnsales(ref totalNum, QueryStr));
            ViewBag.totalNum = totalNum;
            return View(result);
        }
        /// <summary>
        /// 显示和查找仓库中商品
        /// </summary>
        /// <param name="QueryStr"></param>
        /// <returns></returns>
        [HttpPost]
        public ViewResult SHowGoodsInventory(MYDZ.Entity.Goods.QueryCriteriaForInventory QueryStr)
        {
            IList<Item> result = null;
            int totalNum = 0;
            result = (SearchGoodsInventory(ref totalNum, QueryStr));
            ViewBag.totalNum = totalNum;
            return View(result);
        }
        /// <summary>
        /// 批量下架商品
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public ViewResult SetBatchUnShelve(string ListGoodId)
        {
            if (ListGoodId != null)
            {
                tbClientUser clientuser = GetUser("UserInfo");
                goodsinfo.BatchUnShelve(clientuser.UserShops[0].SessionKey, ListGoodId);
            }
            Response.Redirect("/Merchandise/OnSale.html");
            return View();
        }

        public ViewResult ChooseItemprop(string Cids = null, string ParentCid = "0")
        {
            GetItemCat gic = new GetItemCat();
            ViewData["ListCats"] = gic.GetItemcats(Cids, ParentCid);
            return View();
        }

        /// <summary>
        /// 添加商品
        /// </summary>
        /// <returns></returns>
        public ViewResult AddGoods()
        {
            return View();
        }

        /// <summary>
        /// 批量修改
        /// </summary>
        /// <returns></returns>
        public ViewResult SetBatchEdit()
        {
            return View();
        }

        /// <summary>
        /// 类目
        /// </summary>
        /// <returns></returns>
        public ViewResult Category()
        {
            tbClientUser clientuser = GetUser("UserInfo");
            ViewData["SPLM"] = isi.ReutrnSPLM(clientuser.UserNick);
            return View();
        }

        /// <summary>
        /// 编码
        /// </summary>
        /// <returns></returns>
        public ViewResult Coding()
        {
            return View();
        }

        /// <summary>
        /// 描述
        /// </summary>
        /// <returns></returns>
        public ViewResult Describe()
        {
            return View();
        }

        /// <summary>
        /// 运费
        /// </summary>
        /// <returns></returns>
        public ViewResult Freight()
        {
            tbClientUser clientuser = GetUser("UserInfo");
            List<DeliveryTemplate> list = goodsinfo.GetDeliveryTemplates(clientuser.UserShops[0].SessionKey);
            ViewData["list"] = list;
            return View();
        }

        /// <summary>
        /// 热点
        /// </summary>
        /// <returns></returns>
        public ViewResult HotDot()
        {
            return View();
        }


        /// <summary>
        /// 库存
        /// </summary>
        /// <returns></returns>
        public ViewResult Stock()
        {
            return View();
        }

        /// <summary>
        /// 标题
        /// </summary>
        /// <returns></returns>
        public ViewResult Title()
        {
            return View();
        }

        [HttpPost]
        /// <summary>
        /// 批量修改商品信息
        /// </summary>
        /// <returns></returns>
        public JsonResult SetupdateGoods(ItemUpdate goods)
        {
            tbClientUser clientuser = GetUser("UserInfo");
            string ErrorMsg = string.Empty;
            bool result = goodsinfo.simpleupdategoods(clientuser.UserShops[0].SessionKey, goods, out ErrorMsg);
            return Json(new { result = result, ErrorMsg = ErrorMsg });
        }

        [HttpPost]
        /// <summary>
        /// 批量修改商品库存
        /// </summary>
        /// <returns></returns>
        public JsonResult SetUpdateGoodsStoke(ItemQuantityUpdate goods)
        {
            tbClientUser clientuser = GetUser("UserInfo");
            string ErrorMsg = string.Empty;
            bool result = goodsinfo.UpdateStoke(clientuser.UserShops[0].SessionKey, goods, out ErrorMsg);
            return Json(new { result = result, ErrorMsg = ErrorMsg });
        }

        /// <summary>
        /// 批量修改商品标题
        /// </summary>
        /// <param name="goods"></param>
        /// <returns></returns>
        public JsonResult updateGoodsTitle(ItemUpdate goods)
        {
            tbClientUser clientuser = GetUser("UserInfo");
            bool result = goodsinfo.updateGoodsTitle(goods, clientuser.UserShops[0].SessionKey);
            return Json(new { result = result });
        }
        /// <summary>
        /// 批量更新商家编码
        /// </summary>
        /// <param name="goods"></param>
        /// <returns></returns>
        public JsonResult Updatecoding(ItemUpdate goods)
        {
            tbClientUser clientuser = GetUser("UserInfo");
            bool result = goodsinfo.Updatecoding(goods, clientuser.UserShops[0].SessionKey);
            return Json(new { result = result });
        }
        /// <summary>
        /// 批量更新卖点信息
        /// </summary>
        /// <param name="goods"></param>
        /// <returns></returns>
        public JsonResult Updatesellerpoint(ItemUpdate goods)
        {
            tbClientUser clientuser = GetUser("UserInfo");
            bool result = goodsinfo.UpdateHotdot(goods, clientuser.UserShops[0].SessionKey);
            return Json(new { result = result });
        }

        /// <summary>
        /// 批量更新商品描述
        /// </summary>
        /// <param name="goods"></param>
        /// <returns></returns>
        public JsonResult UpdateGoodsDesc(ItemUpdate goods)
        {
            tbClientUser clientuser = GetUser("UserInfo");
            bool result = goodsinfo.UpdateGoodsDesc(goods, clientuser.UserShops[0].SessionKey);
            return Json(new { result = result });
        }
        /// <summary>
        /// 查找在线商品
        /// </summary>
        /// <param name="QueryStr"></param>
        /// <returns></returns>
        private IList<Item> SearchGoodsOnsales(ref int totalNum, MYDZ.Entity.Goods.QueryCriteriaForOnSales QueryStr = null)
        {
            IList<Item> list = null;
            tbClientUser clientuser = GetUser("UserInfo");
            string Type = null;
            list = goodsinfo.ReturnOnsalesByCriteria(clientuser.UserShops[0].SessionKey.ToString(), ref totalNum, QueryStr);
            return list;
        }

        /// <summary>
        /// 查找仓库商品
        /// </summary>
        /// <param name="QueryStr"></param>
        /// <returns></returns>
        private IList<Item> SearchGoodsInventory(ref int totalNum, MYDZ.Entity.Goods.QueryCriteriaForInventory QueryStr = null)
        {
            IList<Item> list = null;
            tbClientUser clientuser = GetUser("UserInfo");
            list = goodsinfo.ReturnInventoryByCriteria(clientuser.UserShops[0].SessionKey.ToString(), ref totalNum, QueryStr);
            return list;
        }



    }
}

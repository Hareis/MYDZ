using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MYDZ.Business.TB_Logic.Goods;
using Top.Api.Response;
using MYDZ.Entity.Goods;
using System.Collections;
using System.Threading;

namespace MYDZ.Business.Business_Logic.Goods
{
    public class InitGoodsInfo
    {
        GetGoods getgoods = new GetGoods();
        SetGoods setgoods = new SetGoods();
        /// <summary>
        /// 查询仓库中的商品
        /// </summary>
        /// <param name="SessionKey"></param>
        /// <param name="TotalNum"></param>
        /// <returns></returns>
        public IList<Item> ReturnInventoryByCriteria(string token, ref int TotalNum, QueryCriteriaForInventory Query)
        {
            IList<Item> list = getgoods.SearchInventoryByCriteria(token, ref TotalNum, Query);
            return list;
        }
        /// <summary>
        /// 查询出售中的商品
        /// </summary>
        /// <param name="SessionKey"></param>
        /// <param name="TotalNum"></param>
        /// <returns></returns>
        public IList<Item> ReturnOnsalesByCriteria(string token, ref int TotalNum, QueryCriteriaForOnSales Query)
        {
            IList<Item> list = getgoods.SearchOnsalesByCriteria(token, ref TotalNum, Query);
            return list;
        }

        /// <summary>
        /// 批量下架商品
        /// </summary>
        /// <param name="token"></param>
        /// <param name="list"></param>
        public void BatchUnShelve(string token, string ListGoodId)
        {
            string[] list = ListGoodId.Split(',');
            Hashtable ht = new Hashtable();
            ht.Add("token", token);
            ht.Add("list", list);
            Thread Threadone = new Thread(UnShelveRun);
            Threadone.Start(ht);
            #region 线程执行操作
        }
        private void UnShelveRun(Object Obj)
        {
            Hashtable ht = (Hashtable)Obj;
            foreach (string item in (ht["list"] as string[]))
            {
                setgoods.UnShelve(ht["token"].ToString(), long.Parse(item));
            }
            #endregion
        }

        /// <summary>
        /// 简单更新商品信息
        /// </summary>
        /// <param name="token"></param>
        /// <param name="goods"></param>
        /// <param name="ErrorMsg"></param>
        /// <returns></returns>
        public bool simpleupdategoods(string token, ItemUpdate goods, out string ErrorMsg)
        {
            return setgoods.UpdateGood(token, goods, out ErrorMsg);
        }

        /// <summary>
        /// 批量更新商品
        /// </summary>
        /// <param name="token"></param>
        /// <param name="list"></param>
        /// <returns></returns>
        public bool ListToUpdategoods(string token, List<ItemUpdate> list)
        {
            Hashtable ht = new Hashtable();
            ht.Add("ListGoods", list);
            ht.Add("token", token);
            Thread Threadtwo = new Thread(UpdategoodsRun);
            Threadtwo.Start(ht);
            return true;
            #region 线程执行操作
        }
        private void UpdategoodsRun(Object Obj)
        {
            Hashtable ht = (Hashtable)Obj;
            foreach (ItemUpdate goods in (ht["ListGoods"] as List<ItemUpdate>))
            {
                string ErrorMsg = null;
                setgoods.UpdateGood(ht["token"].ToString(), goods, out ErrorMsg);
            }
            #endregion
        }
        /// <summary>
        /// 添加商品
        /// </summary>
        /// <param name="token"></param>
        /// <param name="goods"></param>
        /// <param name="ErrorMsg"></param>
        /// <returns></returns>
        public bool addgoods(string token, ItemAdd goods, out string ErrorMsg)
        {
            return setgoods.AddGoods(token, goods, out ErrorMsg);
        }

        /// <summary>
        /// 获取运费模板
        /// </summary>
        /// <param name="token"></param>
        /// <returns></returns>
        public List<DeliveryTemplate> GetDeliveryTemplates(string token)
        {
            return getgoods.DeliveryTemplates(token);
        }
    }
}

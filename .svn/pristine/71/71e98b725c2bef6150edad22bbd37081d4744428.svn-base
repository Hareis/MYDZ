using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MYDZ.Common;
using System.Web.Mvc;
using MYDZ.Business.Business_Logic.Order;
using MYDZ.Entity.ClientUser;
using MYDZ.Entity.Order;
using MYDZ.Entity.Print;
using MYDZ.Business.DataBase_BLL.Print;
using MYDZ.Business.DataBase_BLL.Order;
using System.Collections;
using MYDZ.Config.Font;
using MYDZ.Business.DataBase_BLL.Shop;
using MYDZ.Entity.Shop;
using System.Threading;
using MYDZ.Business.Order;

namespace MYDZ.WebUI.OrderManagement
{
    public class OrderManagementController : BaseController
    {
        InitTradeInfo iti = new InitTradeInfo();

        /// <summary>
        /// 首页
        /// </summary>
        /// <returns></returns>
        public ActionResult OrderIndex()
        {
            return View();
        }

        /// <summary>
        /// 检查用户是否设置物流
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public JsonResult CheckLogis()
        {
            bool isOk = false;
            tbClientUser clientuser = GetUser("UserInfo");
            if (clientuser != null)
            {
                //判断用户是否已经设置物流
                IList<StoreLogistics> list = BStoreLogistics.Select(clientuser.UserShops[0].Shop.ShopId);
                if (list != null && list.Count > 0) { isOk = true; }
            }
            return Json(new { status = isOk });
        }

        /*
         taobao.trades.sold.get - 获取三个月内已卖出的在线订单，适用于用户初始化的时候使用，ISV不应该用此接口来获取增量订单。不建议使用或尽量少用此接口。
         taobao.trades.sold.increment.get – 获取增量订单，适用于用户初始化后，增量同步发生变更的订单，ISV不应该用此接口来获取三个月内的订单。
         taobao.trade.fullinfo.get - 获取单笔订单详情。
        */
        /// <summary>
        /// 三个月内订单（未完成）
        /// </summary>
        /// <param name="TradesSold"></param>
        /// <param name="Tid">查询时交易ID</param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult BacklogOrders(TradesSoldGet TradesSold)
        {
            tbClientUser clientuser = GetUser("UserInfo");
            string ErrorMsg = null;
            if (TradesSold.StartCreated == null)
            {
                TradesSold.StartCreated = Convert.ToDateTime(DateTime.Now.AddDays(-7).ToString("yyyy-MM-dd HH:mm:ss"));
            }
            if (TradesSold.EndCreated == null)
            {
                TradesSold.EndCreated = Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
            }
            ViewData["ListTrade"] = null;// iti.GetTradesSold(clientuser.UserShops[0].SessionKey, TradesSold, out ErrorMsg);
            ViewData["ErrorMsg"] = ErrorMsg;
            return View();
        }
        [HttpPost]
        public ActionResult BacklogOrders(TradesSoldGet TradesSold, string Tid, string PostType)
        {
            tbClientUser clientuser = GetUser("UserInfo");
            string ErrorMsg = null;
            try
            {
                if (TradesSold.StartCreated == null)
                {
                    TradesSold.StartCreated = Convert.ToDateTime(DateTime.Now.AddDays(-7).ToString("yyyy-MM-dd HH:mm:ss"));
                }
                if (TradesSold.EndCreated == null)
                {
                    TradesSold.EndCreated = Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
                }
                switch (PostType)
                {
                    case "Query":
                        if (!string.IsNullOrEmpty(Tid))
                        {
                            ViewData["ListTrade"] = iti.GetTrade(clientuser.UserShops[0].SessionKey, Tid, out ErrorMsg);
                        }
                        else
                        {
                            ViewData["ListTrade"] = null;// iti.GetTradesSold(clientuser.UserShops[0].SessionKey, TradesSold, out ErrorMsg); ;
                        }
                        break;
                    case "Change":
                        ViewData["ListTrade"] = null;//iti.GetTradesSold(clientuser.UserShops[0].SessionKey, TradesSold, out ErrorMsg);
                        break;
                    case "Refresh":
                        ViewData["ListTrade"] =null;// iti.GetTradesSoldIncrement(clientuser.UserShops[0].SessionKey, TradesSold, out ErrorMsg);
                        break;
                    default:
                        ViewData["ListTrade"] = null;
                        break;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            ViewData["ErrorMsg"] = ErrorMsg;
            return View();
        }

        /// <summary>
        /// 给订单添加备注
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public JsonResult AddTradeDesc(string Tid, string Memo, string Flag)
        {
            string errorMsg = null;
            tbClientUser clientuser = GetUser("UserInfo");
            int intflag = 0;
            if (string.IsNullOrEmpty(Flag))
            {
                intflag = 0;
            }
            else
            {
                intflag = int.Parse(Flag);
            }
            if (iti.AddTradeMemo(clientuser.UserShops[0].SessionKey, Tid, Memo, intflag, out errorMsg) != null)
            {
                return Json(new { Result = true, ErrorMsg = "" });
            }
            else
            {
                return Json(new { Result = false, ErrorMsg = errorMsg });
            }
        }

        /// <summary>
        /// 修改收货地址
        /// </summary>
        /// <param name="TradeShipping"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult UpdateReciveAddress(TradeShippingaddressUpdate TradeShipping) //public Trade UpdateTradeShippingAddress(string token, TradeShippingaddressUpdate TradeShipping, out string ErrorMsg)
        {
            string errorMsg = null;
            tbClientUser clientuser = GetUser("UserInfo");
            if (iti.UpdateTradeShippingAddress(clientuser.UserShops[0].SessionKey, TradeShipping, out errorMsg) != null)
            {
                return Json(new { Result = true, ErrorMsg = "" });
            }
            else
            {
                return Json(new { Result = false, ErrorMsg = errorMsg });
            }
        }

        /// <summary>
        /// 打印模板
        /// </summary>
        /// <returns></returns>
        public ViewResult Template(string param = "")
        {
            int LId = 0;
            IList<MYDZ.Entity.Order.StoreLogistics> list = new List<MYDZ.Entity.Order.StoreLogistics>();
            tbPrintPlaneSingle Print = new tbPrintPlaneSingle();
            tbPrintPlaneSingle TPrint = new tbPrintPlaneSingle();
            StoreLogistics slt = null;

            tbClientUser clientuser = GetUser("UserInfo");
            if (!String.IsNullOrEmpty(param))
            {
                int.TryParse(param, out LId);
            }
            list = BStoreLogistics.SelectByUser(clientuser.UserId);
            if (list.Count > 0)
            {
                slt = new StoreLogistics();
                slt = list.FirstOrDefault((e => { return e.Logistics.LogisticsId == LId; }));
                LId = slt != null ? LId : list.First().Logistics.LogisticsId;
                slt = slt != null ? slt : list.First();
            }
            else
            {
                // Response.Redirect("/Delivery.html");
            }

            Print = PrintPlaneSingle.Select(LId, clientuser.UserId);
            TPrint = Print.PlaneId <= 0 ? PrintPlaneSingle.Select(LId, 0) : new tbPrintPlaneSingle();

            Hashtable ht = new Hashtable();
            ht.Add("List_StoreLogistics", list);
            ht.Add("Print", Print);
            ht.Add("TPrint", TPrint);
            ht.Add("LId", LId);
            ht.Add("slt", slt);
            ht.Add("fontConfig", FontConfigs.GetConfig().FontInfo);
            ViewBag.HashTable_Info = ht;

            return View();
        }

        /// <summary>
        /// 保存打印模板
        /// </summary>
        /// <param name="Print">打印单面模板信息</param>
        [HttpPost]
        public JsonResult Template(tbPrintPlaneSingle Print)
        {
            bool IsOk = false;
            tbClientUser clientuser = GetUser("UserInfo");
            try
            {
                if (Print != null)
                {
                    if (Print.UserId == 0)
                    {
                        Print.UserId = clientuser.UserId;
                    }
                    int Id = 0;
                    if (Print.PlaneId > 0)
                    {
                        IsOk = PrintPlaneSingle.Update(Print);
                        if (IsOk)
                        {
                            Id = Print.PlaneId;
                        }
                    }
                    else
                    {
                        Id = PrintPlaneSingle.Insert(Print);
                    }
                    if (Id > 0)
                    {
                        PrintPlaneSingleDetail.Delete(Id);
                        if (Print.DetailList != null)
                        {
                            foreach (var item in Print.DetailList)
                            {
                                if (item.Width != 0 && item.Height != 0)
                                {
                                    item.PlaneId = Id;
                                    item.SubList = String.IsNullOrEmpty(item.SubList) ? "" : item.SubList;
                                    item.Title = String.IsNullOrEmpty(item.Title) ? "" : item.Title;
                                    IsOk = PrintPlaneSingleDetail.Insert(item);
                                }
                            }
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(new { Status = (IsOk ? 1 : 0) });
        }


        /// <summary>
        /// 打印内容信息
        /// </summary>
        /// <param name="ParentId">父类编号</param>
        [HttpPost]
        public void PrintContent(int ParentId = 0)
        {
            List<string> list = new List<string>();
            try
            {
                IList<tbPrintContent> ContentList = MYDZ.Business.DataBase_BLL.Print.PrintContent.SelectByParentIdAndDisplay(ParentId);
                foreach (var content in ContentList)
                {
                    list.Add("{\"Id\":" + content.ContentId + ",\"PId\":" + content.ParentId + ",\"Name\":\"" + content.Name + "\"}");
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            Response.ContentType = "application/json";
            Response.Write("{\"List\":[" + String.Join(",", list) + "]}");
            Response.End();
        }

        [HttpPost]
        public void PrintDetail(int Id)
        {
            List<string> list = new List<string>();
            try
            {
                if (Id == null)
                {
                    Id = 0;
                }
                IList<tbPrintPlaneSingleDetail> DetailList = PrintPlaneSingleDetail.Select(Id);
                foreach (var item in DetailList)
                {
                    list.Add("{\"Id\":" + item.ContentId + ",\"Title\":\"" + item.Title + "\",\"Font\":" + item.Font + ",\"FontSize\":" + item.FontSize + ",\"Bold\":\"" + item.Bold.ToString().ToLower() + "\",\"Sub\":\"" + item.SubList + "\",\"Num\":" + item.Number + ",\"Left\":" + item.Left + ",\"Top\":" + item.Top + ",\"Width\":" + item.Width + ",\"Height\":" + item.Height + ",\"Align\":" + item.Align + "}");
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            Response.ContentType = "application/json";
            Response.Write("{\"List\":[" + String.Join(",", list) + "]}");
            Response.End();
        }

        [HttpPost]
        public JsonResult restore(int PId)
        {
            bool IsOk = false;

            try
            {
                if (GetUser("UserInfo") != null)
                {
                    if (PId > 0)
                    {
                        IsOk = PrintPlaneSingle.Delete(PId);
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(new { Status = (IsOk ? 1 : 0) });
        }

        /// <summary>
        /// 物流设置
        /// </summary>
        /// <param name="param">参数列表</param>
        /// <returns></returns>
        public ViewResult Delivery(string param = "")
        {
            tbClientUser clientuser = GetUser("UserInfo");
            IList<Logistic> List = new List<Logistic>();
            IList<StoreLogistics> LogisticsList = new List<StoreLogistics>();
            tbShopInfo Shop = new tbShopInfo();

            Shop = BShopInfo.SelecttbShopInfoByShopId(clientuser.UserShops[0].Shop.ShopId.ToString());
            LogisticsList = BStoreLogistics.Select(Shop.ShopId);
            List = BLogistic.Select();

            Hashtable ht = new Hashtable();
            ht.Add("Shop", Shop);
            ht.Add("LogisticsList", LogisticsList);
            ht.Add("List", List);
            ViewData["DeliveryInfo"] = ht;
            #region

            int Status = -1;
            if (!String.IsNullOrEmpty(param))
            {
                IDictionary<string, string> UrlParams = Tools.Utils.Request(param);
                if (UrlParams.Count > 0)
                {
                    foreach (KeyValuePair<string, string> kvp in UrlParams)
                    {
                        switch (kvp.Key.Trim())
                        {
                            case "Status":
                                int.TryParse(kvp.Value.Trim(), out Status);
                                break;
                        }
                    }
                }
            }

            ViewBag.Status = Status;
            ViewBag.UserId = GetUser("UserInfo").UserId;
            #endregion
            return View();
        }

        /// <summary>
        /// 物流信息列表
        /// </summary>
        [HttpPost]
        public void Logistics()
        {
            List<string> list = new List<string>();
            try
            {
                IList<Logistic> LogisticsList = BLogistic.Select();
                foreach (var item in LogisticsList)
                {
                    list.Add("{\"Id\":" + item.LogisticsId + ",\"Name\":\"" + item.LogisticsName + "\"}");
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            Response.ContentType = "application/json";
            Response.Write("{\"List\":[" + String.Join(",", list) + "]}");
            Response.End();
        }

        /// <summary>
        /// 保存物流设置信息
        /// </summary>
        /// <param name="ShopLogistics">物流设置信息列表</param>
        /// <param name="ShopId">店铺编号</param>
        [HttpPost]
        public ActionResult Delivery(List<StoreLogistics> LogisticsList)
        {
            bool IsOk = false;
            tbClientUser clientuser = GetUser("UserInfo");
            if (clientuser != null)
            {
                try
                {
                    int ShopId = clientuser.UserShops[0].Shop.ShopId;
                    if (ShopId > 0)
                    {
                        int count = 1;
                        for (var i = LogisticsList.Count - 1; i >= 0; i--)
                        {
                            LogisticsList[i].ShopId = ShopId;
                            LogisticsList[i].Sort = count;
                            count++;
                        }
                        IsOk = MYDZ.Business.DataBase_BLL.Order.BStoreLogistics.Insert(LogisticsList);
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
            return View();
        }

        /// <summary>
        /// 清单模板设置
        /// </summary>
        /// <returns></returns>
        public ActionResult Inventory()
        {
            tbClientUser clientuser = GetUser("UserInfo");
            MYDZ.Entity.Print.tbPrintPlaneSingle Print = PrintPlaneSingle.Select(clientuser.UserId, false);
            Hashtable ht = new Hashtable();
            ht.Add("Print", Print);
            ht.Add("fontConfig", FontConfigs.GetConfig().FontInfo);
            ht.Add("UId", clientuser.UserId);
            ViewData["InventoryInfo"] = ht;
            return View();
        }

        /// <summary>
        /// 关闭一笔交易
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public ActionResult CloseTrade(string Tid, string CloseReason)
        {
            string errorMsg = null;
            tbClientUser clientuser = GetUser("UserInfo");
            bool result = iti.CloseTrade(clientuser.UserShops[0].SessionKey, Tid, CloseReason, out errorMsg);
            return Json(new { Result = result, ErrorMsg = errorMsg });
        }


        /// <summary>
        /// 获取订单
        /// </summary>
        [HttpPost]
        public void RequestOrder(TradesSoldGet TradesSold)
        {
            bool IsOk = false;
            tbOrdersConfig OrderConfig = null;
            tbClientUser User = GetUser("UserInfo");
            tbOrderSync Sync = Business.Order.OrderSync.Select(User.UserId, 1);

            if (!Sync.Sync)
            {
                Sync.Sync = true;
                Sync.SyncEnum = 1;
                if (Sync.UserId > 0)
                {
                    Business.Order.OrderSync.Update(Sync);
                }
                else
                {
                    Sync.UserId = User.UserId;
                    Business.Order.OrderSync.Insert(Sync);
                }

                try
                {
                    tbClientUserShop ShopList = new tbClientUserShop();
                    ShopList = MYDZ.Business.DataBase_BLL.ClientUserBLL.BClientUserShop.SelectUserShopByUserId(User.UserId.ToString());

                    if (ShopList != null )
                    {
                        int ShopId = ShopList.Shop.ShopId;

                        tbOrdersConfig Config = Business.Order.OrdersConfig.Select(ShopId);
                        IList<StoreLogistics> ShopLogistics = MYDZ.Business.DataBase_BLL.Order.BStoreLogistics.SelectInfo(ShopId);
                        OrdersInfo.GetResquestBacklogOrder(TradesSold, User, ShopLogistics, OrderConfig);
                    }
                }
                catch { }
                finally
                {
                    Sync.Sync = false;
                    Business.Order.OrderSync.Update(Sync);
                }
            }

            Response.ContentType = "application/json";
            Response.Write("{\"Status\":" + (IsOk ? 1 : 0) + "}");
            Response.End();
        }
    }
}

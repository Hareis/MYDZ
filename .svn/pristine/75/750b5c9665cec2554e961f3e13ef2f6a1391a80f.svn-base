using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Top.Api;
using Top.Api.Request;
using Top.Api.Response;
using MYDZ.Entity.Order;
using System.Xml.Serialization;
using Top.Api.Parser;

namespace MYDZ.Business.TB_Logic.Order
{
    internal class GetTradeInfo
    {
        /// <summary>
        /// 查询卖家已卖出的交易数据（根据创建时间）
        /// </summary>
        /// <param name="sessionKey"></param>
        /// <param name="TradesSold"></param>
        /// <param name="ErrorMsg"></param>
        internal List<Trade> GetTradesSold(string sessionKey, TradesSoldGet TradesSold, out string ErrorMsg)
        {
            ErrorMsg = null;
            List<Trade> ListTrades = new List<Trade>();
            try
            {
                ITopClient client = new DefaultTopClient(StaticSystemConfig.soft.ApiURL, StaticSystemConfig.soft.AppKey, StaticSystemConfig.soft.AppSecret, "json");
                TradesSoldGetRequest req = new TradesSoldGetRequest();
                req.Fields = "tid,created,pay_time,end_time,status,snapshot_url,buyer_message,price,buyer_nick,orders";
                if (TradesSold.StartCreated != null)
                {
                    string startt = TradesSold.StartCreated.Value.ToString("yyyy-MM-dd HH:mm:ss");
                    DateTime dateTime = DateTime.Parse(startt);
                    req.StartCreated = dateTime;
                }
                if (TradesSold.EndCreated != null)
                {
                    string endt = TradesSold.EndCreated.Value.ToString("yyyy-MM-dd HH:mm:ss");
                    DateTime dateTime = DateTime.Parse(endt);
                    req.EndCreated = dateTime;
                }
                if (TradesSold.Status != null)
                    req.Status = TradesSold.Status;
                if (TradesSold.BuyerNick != null)
                    req.BuyerNick = TradesSold.BuyerNick;
                if (TradesSold.Type != null)
                    req.Type = TradesSold.Type;
                if (TradesSold.ExtType != null)
                    req.ExtType = TradesSold.ExtType;
                if (TradesSold.RateStatus != null)
                    req.RateStatus = TradesSold.RateStatus;
                if (TradesSold.Tag != null)
                    req.Tag = TradesSold.Tag;
                if (TradesSold.PageNo != null)
                    req.PageNo = TradesSold.PageNo;
                if (TradesSold.PageSize != null)
                    req.PageSize = TradesSold.PageSize;
                if (TradesSold.UseHasNext != null)
                    req.UseHasNext = TradesSold.UseHasNext;
                TradesSoldGetResponse response = client.Execute(req, sessionKey);
                if (response.IsError)
                {
                    ErrorMsg = response.SubErrMsg;
                }
                else
                {

                    TopJsonParser topjson = new TopJsonParser();
                    TradesSoldGetResponse1 resp = topjson.Parse<TradesSoldGetResponse1>(response.Body);
                    ListTrades = resp.Trades;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return ListTrades;
        }

        /// <summary>
        /// 交易转化类
        /// </summary>
        internal class TradesSoldGetResponse1 : TopResponse
        {
            [XmlElement("has_next")]
            public bool HasNext { get; set; }
            [XmlElement("total_results")]
            public long TotalResults { get; set; }
            [XmlArray("trades")]
            [XmlArrayItem("trade")]
            public List<Trade> Trades { get; set; }
        }

        /// <summary>
        /// 查询卖家已卖出的增量交易数据（根据修改时间）
        /// </summary>
        /// <param name="sessionKey"></param>
        /// <param name="TradesSold"></param>
        /// <param name="ErrorMsg"></param>
        /// <returns></returns>
        internal List<Trade> GetTradesSoldIncrement(string sessionKey, TradesSoldGet TradesSold, out string ErrorMsg)
        {
            ErrorMsg = null;
            List<Trade> ListTrades = new List<Trade>();
            DateTime starttime = new DateTime();
            DateTime endtime = new DateTime();
            try
            {
                ITopClient client = new DefaultTopClient(StaticSystemConfig.soft.ApiURL, StaticSystemConfig.soft.AppKey, StaticSystemConfig.soft.AppSecret, "json");
                TradesSoldIncrementGetRequest req = new TradesSoldIncrementGetRequest();
                req.Fields = "orders";
                if (TradesSold.StartCreated != null)
                {

                    string startt = TradesSold.StartModified.Value.ToString("yyyy-MM-dd HH:mm:ss");
                    starttime = DateTime.Parse(startt);
                    req.StartModified = starttime;
                }
                if (TradesSold.EndCreated != null)
                {
                    string startt = TradesSold.EndModified.Value.ToString("yyyy-MM-dd HH:mm:ss");
                    endtime = DateTime.Parse(startt);
                    req.EndModified = endtime;
                }
                //这里修正结束时间与开始时间间隔超一天,自动修改时间为开始时间的后一天
                if (starttime != new DateTime() && endtime != new DateTime())
                {
                    if (endtime.Subtract(starttime).Days > 1)
                    {
                        req.EndModified = starttime.AddDays(1);
                    }
                }
                if (TradesSold.Status != null)
                    req.Status = TradesSold.Status;
                if (TradesSold.Type != null)
                    req.Type = TradesSold.Type;
                if (TradesSold.ExtType != null)
                    req.ExtType = TradesSold.ExtType;
                if (TradesSold.Tag != null)
                    req.Tag = TradesSold.Tag;
                if (TradesSold.PageNo != null)
                    req.PageNo = TradesSold.PageNo;
                if (TradesSold.PageSize != null)
                    req.PageSize = TradesSold.PageSize;
                if (TradesSold.UseHasNext != null)
                    req.UseHasNext = TradesSold.UseHasNext;
                TradesSoldIncrementGetResponse response = client.Execute(req, sessionKey);
                if (response.IsError)
                {
                    ErrorMsg = response.SubErrMsg;
                }
                else
                {
                    TopJsonParser topjson = new TopJsonParser();
                    TradesSoldGetResponse1 resp = topjson.Parse<TradesSoldGetResponse1>(response.Body);
                    ListTrades = resp.Trades;
                }
            }
            catch (Exception ex)
            {
                throw;
            }
            return ListTrades;
        }

        /// <summary>
        /// 获取单笔交易的部分信息(性能高) 
        /// </summary>
        /// <param name="sessionKey"></param>
        /// <param name="tid"></param>
        /// <param name="ErrorMsg"></param>
        /// <returns></returns>
        internal List<Trade> GetTrade(string sessionKey, string tid, out string ErrorMsg)
        {
            ErrorMsg = null;
            List<Trade> ListTrades = new List<Trade>();
            try
            {
                ITopClient client = new DefaultTopClient(StaticSystemConfig.soft.ApiURL, StaticSystemConfig.soft.AppKey, StaticSystemConfig.soft.AppSecret, "json");
                TradeGetRequest req = new TradeGetRequest();
                req.Fields = "tid,created,pay_time,end_time,status,snapshot_url,buyer_message,price,buyer_nick,orders";
                if (tid == null)
                {
                    ErrorMsg = "交易编号不能为空！";
                    return null;
                }
                req.Tid = long.Parse(tid);
                TradeGetResponse response = client.Execute(req, sessionKey);
                if (response.IsError)
                {
                    ErrorMsg = response.SubErrMsg;
                    return null;
                }
                else
                {
                    TopJsonParser topjson = new TopJsonParser();
                    TradesSoldGetResponse1 resp = topjson.Parse<TradesSoldGetResponse1>(response.Body);
                    ListTrades = resp.Trades;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return ListTrades;
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Top.Api.Domain;
using MYDZ.Entity.Order;
using MYDZ.Business.DataBase_BLL.Order;

namespace MYDZ.Business
{
    internal class Comm
    {
        /// <summary>
        /// 区域信息列表
        /// </summary>
        public static List<Area> AreaList = null;

        #region 解析配送方式

        /// <summary>
        /// 解析配送方式
        /// </summary>
        /// <param name="temp">配送方式枚举</param>
        /// <returns></returns>
        public static string[] Distribution(IList<StoreLogistics> ShopLogistics, string temp)
        {
            string[] values = null;
            int DefaultPost = -1;

            if (ShopLogistics != null && ShopLogistics.Count > 0) {
                DefaultPost = ShopLogistics[0].Logistics.LogisticsId;
            }

            if (!String.IsNullOrEmpty(temp)) {
                switch (temp.Trim()) {
                    case "free"://卖家包邮
                    case "SELLER":
                    case "TRANSPORT_NONE":
                        values = new string[] { "true", DefaultPost.ToString() };
                        break;
                    default:
                        values = new string[] { "false", DefaultPost.ToString() };
                        break;
                }
            }
            return values;
        }

        #endregion
   
        #region 合并同用户名、同地址订单

        /// <summary>
        /// 合并同用户名、同地址订单（货到付款订单不合并）
        /// </summary>
        /// <param name="Config">配置信息</param>
        /// <param name="Orders">订单列表</param>
        /// <param name="Order">订单信息</param>
        public static void MergeOrder(tbOrdersConfig Config, List<tbOrdersInfo> Orders, tbOrdersInfo Order) {
            //货到付款的订单不合并
            if (Order.CashOndelivery) { Orders.Add(Order); return; }
            
            if (Orders != null && Orders.Count > 0) {
                bool Merger = false;
                if (Config.ConfigId > 0) {
                    Merger = Config.MergerOrder;
                }
                
                if (Merger) {
                    bool IsOk = false;
                    foreach (tbOrdersInfo TempOrder in Orders) {
                        if (TempOrder.CashOndelivery) { continue; }
                        
                        if (TempOrder.Consignee.Name.Trim() == Order.Consignee.Name.Trim() && TempOrder.Consignee.Provice.Trim() == Order.Consignee.Provice.Trim() && TempOrder.Consignee.City.Trim() == Order.Consignee.City.Trim() && TempOrder.Consignee.District.Trim() == Order.Consignee.District.Trim() && TempOrder.Consignee.ConsigneeAddress.Trim() == Order.Consignee.ConsigneeAddress.Trim()) {
                            TempOrder.OrdersFreight += Order.OrdersFreight;//合并运费
                            TempOrder.OrdersProductTotal += Order.OrdersProductTotal;//合并商品总金额
                            TempOrder.OrdersAccounts += Order.OrdersAccounts;//合并订单应收金额
                            TempOrder.OrdersPaid += Order.OrdersPaid;//合并订单实收金额
                            TempOrder.OrdersDiscount += TempOrder.OrdersAccounts - TempOrder.OrdersProductTotal - TempOrder.OrdersFreight;//计算订单折扣
                            TempOrder.OrdersOutNumber += "," + Order.OrdersOutNumber;//合并订单外部编码
                            TempOrder.ServiceNotes += "%Separation%" + Order.ServiceNotes;//合并客服备注
                            TempOrder.IsOrdersReFund = TempOrder.IsOrdersReFund || Order.IsOrdersReFund ? true : false;

                            TempOrder.Details.AddRange(Order.Details);
                            IsOk = true;
                            break;
                        }
                    }

                    if (!IsOk) {
                        Orders.Add(Order);
                    }

                } else {
                    Orders.Add(Order);
                }
            } else {
                Orders.Add(Order);
            }
        }

        #endregion
        
        #region 状态分配

        /// <summary>
        /// 状态分配
        /// </summary>
        /// <param name="order">订单信息</param>
        public static void StatusAssign(tbOrdersConfig Config, tbOrdersInfo Order) {
            if (Config.DetailList == null) { return; }
            if (Config.DetailList.Count <= 0) { return; }
            int[] IdList = new int[] { 3, 4, 5, 6, 7 };

            foreach (int id in IdList) {
                try {
                    bool Isok = false;
                    var items = Config.DetailList.Where((e) => { return e.EnumId == id; });
                    if (items != null && items.Count() > 0) {
                        foreach (var item in items) {
                            switch (id) { 
                                case 3:
                                    if (Order.ServiceFlag == "op_memo_" + (int.Parse(item.Key.Split(',')[0]) - 1) + ".png") {
                                        Order.Status.OrdersStatusId = int.Parse(item.Value.Split(',')[0]);
                                        Isok = true;
                                    }
                                    break;
                                case 4:
                                    if (Order.ServiceNotes.IndexOf(item.Key.Split(',')[0]) != -1) {
                                        Order.Status.OrdersStatusId = int.Parse(item.Value.Split(',')[0]);
                                        Isok = true;
                                    }
                                    break;
                                case 5:
                                    if (Order.BuyerMsg.IndexOf(item.Key.Split(',')[0]) != -1) {
                                        Order.Status.OrdersStatusId = int.Parse(item.Value.Split(',')[0]);
                                        Isok = true;
                                    }
                                    break;
                                case 6:
                                    foreach (var subitem in Order.Details) {
                                        if (subitem.ProductName.IndexOf(item.Key.Split(',')[0]) != -1) {
                                            Order.Status.OrdersStatusId = int.Parse(item.Value.Split(',')[0]);
                                            Isok = true;
                                            break;
                                        }
                                    }
                                    break;
                                case 7: 
                                    foreach (var subitem in Order.Details) {
                                        if (subitem.ProductEncoding.IndexOf(item.Key.Split(',')[0]) != -1) {
                                            Order.Status.OrdersStatusId = int.Parse(item.Value.Split(',')[0]);
                                            Isok = true;
                                            break;
                                        }
                                    }
                                    break;
                            }

                            if (Isok) { break; }
                        }
                    }

                    if (Isok) { break; }

                } catch { }
            }
        }

        #endregion
        
        #region 物流分配

        /// <summary>
        /// 物流分配
        /// </summary>
        /// <param name="Order">订单信息</param>
        public static bool DeliveryAssign(tbOrdersConfig Config, IList<StoreLogistics> ShopLogistics, tbOrdersInfo Order)
        {
            bool Isok = false;
            
            if (Config.ConfigId > 0) {
                if (Order.CashOndelivery && !String.IsNullOrEmpty(Config.CashDelivery)) {
                    int LogisticsId = 0;
                    int.TryParse(Config.CashDelivery, out LogisticsId);
                    if (LogisticsId > 0) { Order.Logistics.LogisticsId = LogisticsId; Isok = true; }
                }
            }

            if (Config.DetailList != null && !Isok && Config.DetailList.Count > 0) { 
                int[] IdList = new int[] { 8, 1, 2 };
            
                foreach (int id in IdList) {
                    try {
                        var items = Config.DetailList.Where((e) => { return e.EnumId == id; });
                        if (items != null && items.Count() > 0) {
                            foreach (var item in items) {
                                switch (id) { 
                                    case 8:
                                        if (Order.Consignee.Provice.IndexOf(item.Key.Split(',')[0]) != -1) {
                                            Order.Logistics.LogisticsId = int.Parse(item.Value.Split(',')[0]);
                                            Isok = true;
                                        }
                                        break;
                                    case 1:
                                        if (Order.ServiceNotes.IndexOf(item.Key.Split(',')[0]) != -1) {
                                            Order.Logistics.LogisticsId = int.Parse(item.Value.Split(',')[0]);
                                            Isok = true;
                                        }
                                        break;
                                    case 2:
                                        if (Order.BuyerMsg.IndexOf(item.Key.Split(',')[0]) != -1) {
                                            Order.Logistics.LogisticsId = int.Parse(item.Value.Split(',')[0]);
                                            Isok = true;
                                        }
                                        break;
                                }

                                if (Isok) { break; }
                            }
                        }

                        if (Isok) { break; }

                    } catch { }
                }
            }

            return Isok;
        }

        #endregion

        #region 根据物流配送范围和物流优先级别分配订单物流信息
        
        /// <summary>
        /// 根据物流配送范围和物流优先级别分配订单物流信息
        /// </summary>
        /// <param name="ShopLogistics">店铺物流列表</param>
        /// <param name="Order">订单信息</param>
        /// <param name="CompayList">能够派送的物流公司列表</param>
        public static void RangeDelivery(IList<StoreLogistics> ShopLogistics, tbOrdersInfo Order, List<string> CompayList)
        {
            if (!(CompayList != null && CompayList.Count > 0 && ShopLogistics != null && ShopLogistics.Count > 0)) { return; }
            var query = from p in ShopLogistics where CompayList.Contains(p.Logistics.LogisticsCode.Trim()) orderby p.Sort descending select p;
            try {
                if (query != null && query.Count() > 0) {
                    Order.Logistics.LogisticsId = query.First().Logistics.LogisticsId;
                } else {
                    Order.Logistics.LogisticsId = (from p in ShopLogistics orderby p.Sort ascending select p).First().Logistics.LogisticsId;
                }
            } catch { }
        }

        #endregion

        #region 解析订单是否需要打印发货单
        
        /// <summary>
        /// 解析订单是否需要打印发货单
        /// </summary>
        /// <param name="Config">订单获取配置信息</param>
        /// <param name="ShopLogistics">店铺物流列表</param>
        /// <param name="Order">订单信息</param>
        public static void AnalyticalInvoice(tbOrdersConfig Config, IList<StoreLogistics> ShopLogistics, tbOrdersInfo Order)
        { 
            //判断指定配送方式下的订单是否需要打印发货单
            if (ShopLogistics != null && ShopLogistics.Count > 0) {
                foreach (StoreLogistics SL in ShopLogistics)
                {
                    if (SL.Logistics.LogisticsId == Order.Logistics.LogisticsId) {
                        int count = 0;
                        foreach (tbOrdersDetail od in Order.Details) {
                            if (!od.IsCanceled) {
                                if (!Config.RefundPrint) {
                                    if (!od.IsProductReFund) {
                                        count++;
                                    }
                                } else {
                                    count++;
                                }
                            }
                        }
                        if (SL.Number >= count) {
                            Order.IsInventory = false;
                        } else {
                            Order.IsInventory = true;
                        }
                    }
                }
            }
        }

        #endregion

        #region 注释的内容
        /*
        #region 订单写入主调函数

        /// <summary>
        /// 订单写入主调函数
        /// </summary>
        /// <param name="Order">订单信息</param>
        public static void Insert(tbOrdersInfo Order) {
            try {
                Order.OrdersNumber = BitConverter.ToInt64(Guid.NewGuid().ToByteArray(), 0).ToString();
                if (!Business.Order.OrdersInfo.Insert(Order)) return;

                Order.Buyer.OrdersNumber = Order.OrdersNumber;
                if (!Business.Order.BuyerInfo.Insert(Order.Buyer)) return;

                Order.Consignee.OrdersNumber = Order.OrdersNumber;
                if (!Business.Order.ConsigneeInfo.Insert(Order.Consignee)) return;

                foreach (tbOrdersDetail od in Order.Details) {
                    od.OrdersNumber = Order.OrdersNumber;
                    od.SubOrderNumber = String.IsNullOrEmpty(od.SubOrderNumber) ? "" : od.SubOrderNumber;
                    od.OutNumberIId = String.IsNullOrEmpty(od.OutNumberIId) ? "" : od.OutNumberIId;
                    od.ProductCost = 0;
                    Business.Order.OrdersDetail.Insert(od);
                }
            } catch { }
        }

        #endregion

        #region 商品写入主调函数
        
        /// <summary>
        /// 商品写入主调函数
        /// </summary>
        /// <param name="List">商品信息列表</param>
        /// <returns></returns>
        public static bool InsertProduct(IList<My.App.Entity.Product.tbProductAbb> List) {
            bool IsOk = false;
            try {
                if (List != null && List.Count > 0) {
                    Business.Product.ProductAbb.Update(List[0].ShopId, false);
                    foreach (var item in List) {
                        IsOk = Business.Product.ProductAbb.Insert(item);
                    }
                }
            } catch { }

            return IsOk;
        }

        #endregion
        */
        #endregion

        #region 数据转换
        
        /// <summary>
        /// 数据转换
        /// </summary>
        /// <param name="str">原类型</param>
        /// <param name="Type">欲转换类型枚举</param>
        /// <returns>基类型</returns>
        public static object DataChange(string str, TypeChange Type) {
            string Temp = "";

            if (!String.IsNullOrEmpty(str)) {
                Temp = str.Trim();
            }

            switch (Type) {
                case TypeChange.DATETIME:
                    DateTime DT_Temp = DateTime.Now;
                    DateTime.TryParse(Temp, out DT_Temp);
                    return DT_Temp;
                case TypeChange.INT:
                    int I_Temp = 0;
                    int.TryParse(Temp, out I_Temp);
                    return I_Temp;
                case TypeChange.STRING:
                    return Temp;
                case TypeChange.DECIMAL:
                    decimal D_Temp = 0;
                    decimal.TryParse(Temp, out D_Temp);
                    return D_Temp;
                default:
                    return Temp;
            }
        }

        #endregion
    }
    /// <summary>
    /// 数据转换枚举
    /// </summary>
    internal enum TypeChange
    {
        //字符串类型
        STRING,
        //数字类型
        INT,
        //日期类型
        DATETIME,
        //金额类型
        DECIMAL,
    }
}

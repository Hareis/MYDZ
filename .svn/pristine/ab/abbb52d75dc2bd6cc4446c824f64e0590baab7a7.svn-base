using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Security.Cryptography;
using System.IO;

namespace MYDZ.Tools.Encrypt
{
    /// <summary>
    /// DES加密解密
    /// </summary>
    internal class DES
    {
        /// <summary>
        /// 默认密钥向量
        /// </summary>
        private static byte[] Keys = { 0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0xCD, 0xEF };

        /// <summary>
        /// DES加密字符串
        /// </summary>
        /// <param name="EncryptString">待加密的字符串</param>
        /// <param name="EncryptKey">加密密钥，要求为8位</param>
        /// <returns>加密成功返回加密后的字符串</returns>
        public static string Encode(string EncryptString, string EncryptKey) {
            EncryptKey = Utils.GetSubString(EncryptKey, 8, "");
            EncryptKey = EncryptKey.PadRight(8, ' ');

            byte[] RgbKey = Encoding.UTF8.GetBytes(EncryptKey.Substring(0, 8));
            byte[] RgbIV = Keys;
            byte[] InputByteArray = Encoding.UTF8.GetBytes(EncryptString);
            DESCryptoServiceProvider DCSP = new DESCryptoServiceProvider();
            MemoryStream mStream = new MemoryStream();
            CryptoStream cStream = new CryptoStream(mStream, DCSP.CreateEncryptor(RgbKey, RgbIV), CryptoStreamMode.Write);
            cStream.Write(InputByteArray, 0, InputByteArray.Length);
            cStream.FlushFinalBlock();
            return Convert.ToBase64String(mStream.ToArray());
        }

        /// <summary>
        /// DES解密字符串
        /// </summary>
        /// <param name="DecryptString">待解密的字符串</param>
        /// <param name="DecryptKey">解密密钥，要求为32位</param>
        /// <returns>解密成功返回解密后的字符串，失败返回空</returns>
        public static string Decode(string DecryptString, string DecryptKey) {
            try {
                DecryptKey = Utils.GetSubString(DecryptKey, 8, "");
                DecryptKey = DecryptKey.PadRight(8, ' ');

                byte[] RgbKey = Encoding.UTF8.GetBytes(DecryptKey);
                byte[] RgbIV = Keys;
                byte[] InputByteArray = Convert.FromBase64String(DecryptString);
                DESCryptoServiceProvider DCSP = new DESCryptoServiceProvider();
                MemoryStream mStream = new MemoryStream();
                CryptoStream cStream = new CryptoStream(mStream, DCSP.CreateDecryptor(RgbKey, RgbIV), CryptoStreamMode.Write);
                cStream.Write(InputByteArray, 0, InputByteArray.Length);
                cStream.FlushFinalBlock();
                return Encoding.UTF8.GetString(mStream.ToArray());
            } catch {
                return "";
            }
        }
    }
}

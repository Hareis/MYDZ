using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MYDZ.Interface.ClientUser;
using System.Collections;
using MYDZ.Entity.ClientUser;
using Top.Api;
using Top.Api.Request;
using Top.Api.Response;
using MYDZ.Common;
using MYDZ.Business.TB_Logic;
using MYDZ.Config;
using MYDZ.Business.ClientUserBLL;
using MYDZ.Interface;
using System.Transactions;
using MYDZ.Business.DataBase_BLL.Shop;
using MYDZ.Business.TB_Logic.Shop;
using MYDZ.Entity.Shop;
using MYDZ.Business.DataBase_BLL.ClientUserBLL;
using MYDZ.Tools;

namespace MYDZ.Business.InitUser
{
    public class UserInfo
    {
        /// <summary>
        /// 开始授权，生成URL
        /// </summary>
        public static string GetAuthorize()
        {
            return GetInfo.ReturnUrl();
        }

        /// <summary>
        /// 通过Code 来获取AccessToken
        /// 括号内的东西 , string itemCode = null
        /// </summary>
        public tbClientUser FromCodeToGetAccesToken(string code)
        {
            var Item = new { AccessToken = "", ExpiresIn = DateTime.MinValue };
            Item = Tools.Utils.TypeConversion(GetInfo.GetAccesstoken(code), Item);

            //将淘宝返回的User类型转化为本地需要的类型
            tbClientUser us = Changetype(Item.AccessToken, Item.ExpiresIn.ToString());
            Hashtable ht = new Hashtable();
            ht.Add("TbUserId", us.TbUserId);
            ht.Add("AccessToken", Item.AccessToken);
            DataCache.SetCache("UserClientInfo" + us.TbUserId, ht);
            //保存用户数据
            return Save(us, Item.AccessToken);
        }

        /// <summary>
        /// 保存用户信息到数据库
        /// </summary>
        /// <param name="us"></param>
        private tbClientUser Save(tbClientUser us, string token)
        {
            GetShop gs = new GetShop();
            using (TransactionScope scope = new TransactionScope())
            {
                try
                {
                    tbClientUser ClientUser = BClientUser.ExitisUser(us.TbUserId.ToString(), us.UserNick);
                    if (ClientUser == null)
                    {
                        int ScoreId = 0;
                        //从淘宝获取店铺信息
                        tbShopInfo ShopInfo = gs.GetInfoFromTb(us.UserNick, 0);
                        if (ShopInfo.Score.ItemScore != null && ShopInfo.Score.ServiceScore != null)
                        {
                            //往数据库插入店铺评分表
                            ScoreId = BShopScore.InsertShopScore(ShopInfo.Score);
                        }
                        //获取返回自动生成的主键
                        ShopInfo.Score.ScoreId = ScoreId;
                        //往店铺信息表中插入数据
                        int shopid = BShopInfo.InsertShopInfo(ShopInfo);
                        //插入用户信用表，并获取返回的ID
                        int Creditid = BClientUserCredit.InsertUserCredit(new tbClientUserCredit { GoodNum = us.Credit.GoodNum, Level = us.Credit.Level, Score = us.Credit.Score, TotalNum = us.Credit.TotalNum });
                        us.Credit.CreditId = Creditid;
                        //插入用户信息表
                        int userid = BClientUser.InsertUser(us);
                        //往用户店铺关系对应表中插入数据
                        BClientUserShop.InsertUserShop(new tbClientUserShop() { Shop = ShopInfo, SessionKey = token, UserId = userid });
                    }
                    else
                    {
                        us.UserId = ClientUser.UserId;
                        //BClientUser.UpdateUser(us);
                        tbShopInfo shopinfo = BClientUserShop.SelectUserShopByUserId(ClientUser.UserId.ToString()).Shop;
                        if (shopinfo.Score.ItemScore != null && shopinfo.Score.ServiceScore != null)
                        {
                            BShopScore.UpdateShopScore(new tbShopScore() { DeliveryScore = shopinfo.Score.DeliveryScore, ItemScore = shopinfo.Score.ItemScore, ServiceScore = shopinfo.Score.ServiceScore, ScoreId = shopinfo.Score.ScoreId });
                        }
                        BClientUserShop.UpdateUserShop(new tbClientUserShop() { Shop = new tbShopInfo() { ShopId = shopinfo.ShopId }, SessionKey = token, UserId = ClientUser.UserId });
                    }
                    scope.Complete();
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
            return us;
        }

        /// <summary>
        /// 将淘宝返回的User类型转化为本地需要的类型
        /// </summary>
        /// <param name="UserId"></param>
        /// <returns></returns>
        private tbClientUser Changetype(string token, string ExpiresTime)
        {
            Top.Api.Domain.User SimppleUser = GetInfo.GetUser(token);
            tbClientUser us = new tbClientUser();
            try
            {
                us.TbUserId = (int)SimppleUser.UserId;
                us.UserNick = SimppleUser.Nick;

                us.Gender = new tbClientUserGender();
                us.Credit = new tbClientUserCredit();
                us.Status = new tbClientUserStatus();
                us.Type = new tbClientUserType();
                us.Level = new tbClientUserLevel();

                us.Gender.GenderId = Utils.GetEnum<UserGender>(SimppleUser.Sex, UserGender.m).GetHashCode();
                us.Status.StatusId = Utils.GetEnum<UserStatus>(SimppleUser.Status, UserStatus.normal).GetHashCode();
                us.Level.LevelId = Utils.GetEnum<UserLevel>(SimppleUser.VipInfo, UserLevel.asso_vip).GetHashCode();
                us.Type.TypeId = Utils.GetEnum<UserType>(SimppleUser.Type, UserType.B).GetHashCode();

                us.AlipayBind = SimppleUser.AlipayBind.Equals("bind") ? true : false;
                us.HasMorePic = SimppleUser.HasMorePic;
                us.ItemImgNum = (int)SimppleUser.ItemImgNum;
                us.ItemImgSize = (int)SimppleUser.ItemImgSize;
                us.PropImgNum = (int)SimppleUser.PropImgNum;
                us.PropImgSize = (int)SimppleUser.PropImgSize;
                us.Protection = SimppleUser.ConsumerProtection;
                us.Avatar = SimppleUser.Avatar;
                us.LiangPin = SimppleUser.Liangpin;
                us.SignFoods = SimppleUser.SignFoodSellerPromise;
                us.HasShop = SimppleUser.HasShop;
                us.Level = us.Level;
                us.IsLightning = SimppleUser.IsLightningConsignment;
                us.HasSubStock = SimppleUser.HasSubStock;
                us.GoldenSeller = SimppleUser.IsGoldenSeller;
                us.Subscribe = SimppleUser.MagazineSubscribe;
                us.VerMarket = SimppleUser.VerticalMarket;
                us.OnlineGaming = SimppleUser.OnlineGaming;
                us.EmailNum = 0;
                us.SMSNum = 0;
                us.Currency = 0;
                us.Validity = DateTime.Parse(ExpiresTime);
                us.InputDate = DateTime.Now.ToLocalTime();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return us;
        }

    }
}

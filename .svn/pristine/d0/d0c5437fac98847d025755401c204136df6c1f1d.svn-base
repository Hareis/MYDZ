using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Top.Api;
using Top.Api.Request;
using Top.Api.Response;
using MYDZ.Entity.Goods;
using MYDZ.Tools;

namespace MYDZ.Business.TB_Logic.Goods
{
    public class GetGoods
    {
        /// <summary>
        /// 获取商家在售商品信息
        /// </summary>
        /// <param name="sessionKey"></param>
        /// <returns></returns>
        public IList<Item> GetgoodOnsale(string sessionKey, ref int TotalNum)
        {
            ITopClient client = new DefaultTopClient(StaticSystemConfig.soft.ApiURL, StaticSystemConfig.soft.AppKey, StaticSystemConfig.soft.AppSecret);
            ItemsOnsaleGetRequest req = new ItemsOnsaleGetRequest();
            req.Fields = "approve_status,num_iid,title,nick,type,cid,pic_url,num,props,valid_thru,list_time,price,has_discount,has_invoice,has_warranty,has_showcase,modified,delist_time,postage_id,seller_cids,outer_id";
            ItemsOnsaleGetResponse response = client.Execute(req, sessionKey);
            return ChangeTypeForItem(response.Body); ;
        }
        /// <summary>
        /// 获取商家仓库中的商品
        /// </summary>
        /// <param name="sessionKey"></param>
        /// <returns></returns>
        public IList<Item> GetgoodInventory(string sessionKey, ref int TotalNum)
        {
            ITopClient client = new DefaultTopClient(StaticSystemConfig.soft.ApiURL, StaticSystemConfig.soft.AppKey, StaticSystemConfig.soft.AppSecret);
            ItemsInventoryGetRequest req = new ItemsInventoryGetRequest();
            req.Fields = "approve_status,num_iid,title,nick,type,cid,pic_url,num,props,valid_thru, list_time,price,has_discount,has_invoice,has_warranty,has_showcase, modified,delist_time,postage_id,seller_cids,outer_id";
            ItemsInventoryGetResponse response = client.Execute(req, sessionKey);
            return ChangeTypeForItem(response.Body);
        }
        /// <summary>
        /// 查询在售商品
        /// </summary>
        /// <param name="sessionKey"></param>
        /// <param name="Query"></param>
        public IList<Item> SearchOnsalesByCriteria(string sessionKey, ref int TotalNum, QueryCriteriaForOnSales Query)
        {
            ITopClient client = new DefaultTopClient(StaticSystemConfig.soft.ApiURL, StaticSystemConfig.soft.AppKey, StaticSystemConfig.soft.AppSecret);
            ItemsOnsaleGetRequest req = new ItemsOnsaleGetRequest();
            req.Fields = "approve_status,num_iid,title,nick,type,cid,pic_url,num,props,valid_thru,list_time,price,has_discount,has_invoice,has_warranty,has_showcase,modified,delist_time,postage_id,seller_cids,outer_id";
            req.Q = Query.Q;
            req.Cid = Query.Cid;
            req.SellerCids = Query.SellerCids;
            req.PageNo = Query.PageNo;
            req.HasDiscount = Query.HasDiscount;
            req.HasShowcase = Query.HasShowcase;
            req.OrderBy = Query.OrderBy;
            req.IsTaobao = Query.IsTaobao;
            req.IsEx = Query.IsEx;
            req.PageSize = Query.PageSize;
            req.StartModified = Query.StartModified;
            req.EndModified = Query.EndModified;
            req.IsCspu = Query.IsCspu;
            ItemsOnsaleGetResponse response = client.Execute(req, sessionKey);
            return ChangeTypeForItem(response.Body);
        }
        /// <summary>
        /// 查询仓库中的商品
        /// </summary>
        /// <param name="sessionKey"></param>
        /// <returns></returns>
        public IList<Item> SearchInventoryByCriteria(string sessionKey, ref int TotalNum, QueryCriteriaForInventory Query)
        {
            ITopClient client = new DefaultTopClient(StaticSystemConfig.soft.ApiURL, StaticSystemConfig.soft.AppKey, StaticSystemConfig.soft.AppSecret);
            ItemsInventoryGetRequest req = new ItemsInventoryGetRequest();
            req.Fields = "approve_status,num_iid,title,nick,type,cid,pic_url,num,props,valid_thru, list_time,price,has_discount,has_invoice,has_warranty,has_showcase, modified,delist_time,postage_id,seller_cids,outer_id";
            req.Q = Query.Q;
            req.Banner = Query.Banner;
            req.Cid = Query.Cid;
            req.SellerCids = Query.SellerCids;
            req.PageNo = Query.PageNo;
            req.PageSize = Query.PageSize;
            req.HasDiscount = Query.HasDiscount;
            req.OrderBy = Query.OrderBy;
            req.IsTaobao = Query.IsTaobao;
            req.IsEx = Query.IsEx;
            req.StartModified = Query.StartModified;
            req.EndModified = Query.EndModified;
            req.IsCspu = Query.IsCspu;
            ItemsInventoryGetResponse response = client.Execute(req, sessionKey);
            return ChangeTypeForItem(response.Body);
        }
        /// <summary>
        /// 根据外部ID获取商品
        /// </summary>
        /// <param name="OuterId"></param>
        /// <param name="sessionKey"></param>
        /// <returns></returns>
        public IList<Item> GetGoodsByOuterId(string OuterId, string sessionKey, ref int TotalNum)
        {
            ITopClient client = new DefaultTopClient(StaticSystemConfig.soft.ApiURL, StaticSystemConfig.soft.AppKey, StaticSystemConfig.soft.AppSecret);

            ItemsCustomGetRequest req = new ItemsCustomGetRequest();
            req.OuterId = OuterId;
            req.Fields = "approve_status,num_iid,title,nick,type,cid,pic_url,num,props,valid_thru,list_time,price,has_discount,has_invoice,has_warranty,has_showcase,modified,delist_time,postage_id,seller_cids,outer_id";
            ItemsCustomGetResponse response = client.Execute(req, sessionKey);
            return ChangeTypeForItem(response.Body);
        }



        /// <summary>
        /// 将淘宝类型转化为本地类型
        /// </summary>
        /// <param name="str">获得的商品列表JSon </param>
        /// <returns></returns>
        public IList<Item> ChangeTypeForItem(string str)
        {
            List<Item> result = Utils.JsonStrToObject<List<Item>>(str);
            #region    待验证的代码 （无用）    
            //IList<Item> result = null;
            //foreach (Top.Api.Domain.Item item in Ilist)
            //{
            
            //Item proc = new Item();
            //proc.AfterSaleId = item.AfterSaleId;
            //proc.ApproveStatus = item.ApproveStatus;
            //proc.AuctionPoint = item.AuctionPoint;
            //proc.AutoFill = item.AutoFill;
            //proc.Barcode = item.Barcode;
            //proc.ChangeProp = item.ChangeProp;
            //proc.Cid = item.Cid;
            //proc.CodPostageId = item.CodPostageId;
            //proc.Created = item.Created;
            //proc.CustomMadeTypeId = item.CustomMadeTypeId;
            //proc.DelistTime = item.DelistTime;
            //proc.DeliveryTime = new DeliveryTime();
            //proc.DeliveryTime.DeliveryTime_ = item.DeliveryTime.DeliveryTime_;
            //proc.DeliveryTime.DeliveryTimeType = item.DeliveryTime.DeliveryTimeType;
            //proc.DeliveryTime.NeedDeliveryTime = item.DeliveryTime.NeedDeliveryTime;
            //proc.Desc = item.Desc;
            //proc.DescModuleInfo = new DescModuleInfo();
            //proc.DescModuleInfo.AnchorModuleIds = item.DescModuleInfo.AnchorModuleIds;
            //proc.DescModuleInfo.Type = item.DescModuleInfo.Type;
            //proc.DescModules = item.DescModules;
            //proc.DetailUrl = item.DetailUrl;
            //proc.EmsFee = item.EmsFee;
            //proc.ExpressFee = item.ExpressFee;
            //proc.Features = item.Features;
            //proc.FoodSecurity = new FoodSecurity();
            //proc.FoodSecurity.Contact = item.FoodSecurity.Contact;
            //proc.FoodSecurity.DesignCode = item.FoodSecurity.DesignCode;
            //proc.FoodSecurity.Factory = item.FoodSecurity.Factory;
            //proc.FoodSecurity.FactorySite = item.FoodSecurity.FactorySite;
            //proc.FoodSecurity.FoodAdditive = item.FoodSecurity.FoodAdditive;
            //proc.FoodSecurity.HealthProductNo = item.FoodSecurity.HealthProductNo;
            //proc.FoodSecurity.Mix = item.FoodSecurity.Mix;
            //proc.FoodSecurity.Period = item.FoodSecurity.Period;
            //proc.FoodSecurity.PlanStorage = item.FoodSecurity.PlanStorage;
            //proc.FoodSecurity.PrdLicenseNo = item.FoodSecurity.PrdLicenseNo;
            //proc.FoodSecurity.ProductDateEnd = item.FoodSecurity.ProductDateEnd;
            
            //  result.Add(proc);
            //}
            #endregion
            return result;
        }

    }
}

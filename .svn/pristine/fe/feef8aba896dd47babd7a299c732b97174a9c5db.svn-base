using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MYDZ.Interface.Order;
using MYDZ.Entity.Order;
using MYDZ.DALFactory;

namespace MYDZ.Business.Order
{
    public class OrdersInfo
    {
        private static readonly IOrdersInfo OrdersInfoDal = DataAccess.Create("Order.OrdersInfo") as IOrdersInfo;

        /// <summary>
        /// 查询订单信息列表（分页）
        /// </summary>
        /// <param name="MaxRow">总行数</param>
        /// <param name="MaxPage">总页数</param>
        /// <param name="PageCount">当前页码</param>
        /// <param name="pageSize">每页显示的条数</param>
        /// <param name="Where">查询条件</param>
        /// <param name="Order">排序字段</param>
        /// <returns></returns>
        public static IList<tbOrdersInfo> Select(out int MaxRow, out int MaxPage, int PageCount = 1, int pageSize = 0, string Where = "", string Order = "") {
            return OrdersInfoDal.Select(PageCount, pageSize, Where, Order, out MaxRow, out MaxPage);
        }

        /// <summary>
        /// 根据订单编号列表查询订单信息列表
        /// </summary>
        /// <param name="OrdersNumberList">订单编号列表</param>
        /// <returns></returns>
        public static IList<tbOrdersInfo> Select(string OrdersNumberList) {
            return OrdersInfoDal.Select(OrdersNumberList);
        }

        /// <summary>
        /// 根据物流单号查询订单信息列表
        /// </summary>
        /// <param name="DeliverNumber">物流单号</param>
        /// <param name="ShopId">店铺编号</param>
        /// <returns></returns>
        public static IList<tbOrdersInfo> SelectByDeliver(string DeliverNumber, int ShopId) {
            return OrdersInfoDal.SelectByDeliver(DeliverNumber, ShopId);
        }

        /// <summary>
        /// 查询已付款未发货的订单编号列表
        /// </summary>
        /// <param name="ShopId">店铺编号</param>
        /// <returns></returns>
        public static IDictionary<string, string> SelectOrdersNumber(int ShopId) {
            return OrdersInfoDal.SelectOrdersNumber(ShopId);
        }

        /// <summary>
        /// 根据用户编号查询汇总信息
        /// </summary>
        /// <param name="UserId">用户编号</param>
        /// <returns></returns>
        public static OrderCollect Select(int UserId) {
            return OrdersInfoDal.Select(UserId);
        }

        /// <summary>
        /// 根据查询条件查询订单打印汇总信息
        /// </summary>
        /// <param name="Where">查询条件</param>
        /// <returns></returns>
        public static int[] SelectPrint(string Where) {
            return OrdersInfoDal.SelectPrint(Where);
        }

        /// <summary>
        /// 根据订单外部编号查询订单是否存在
        /// </summary>
        /// <param name="OrderOutNumber">订单外部编号</param>
        /// <param name="ShopId">店铺编号</param>
        /// <returns></returns>
        public static bool CheckOrder(string OrderOutNumber, int ShopId) {
            return OrdersInfoDal.CheckOrder(OrderOutNumber, ShopId);
        }

        /// <summary>
        /// 修改订单备注信息
        /// </summary>
        /// <param name="OrdersNumber">订单编号</param>
        /// <param name="Flag">备注旗帜</param>
        /// <param name="Detail">备注内容</param>
        /// <returns></returns>
        public static bool UpdateDetail(string OrdersNumber, string Flag, string Detail) {
            return OrdersInfoDal.UpdateDetail(OrdersNumber, Flag, Detail);
        }

        /// <summary>
        /// 添加订单信息
        /// </summary>
        /// <param name="OrdersInfo">订单表</param>
        /// <returns></returns>
        public static bool Insert(tbOrdersInfo OrdersInfo) {
            return OrdersInfoDal.Insert(OrdersInfo);
        }

        /// <summary>
        /// 修改订单状态
        /// </summary>
        /// <param name="OrdersNumber">订单编号</param>
        /// <param name="OrderStatus">订单状态</param>
        /// <returns></returns>
        public static bool UpdateStatus(string OrdersNumber, int OrderStatus) {
            return OrdersInfoDal.UpdateStatus(OrdersNumber, OrderStatus);
        }

        /// <summary>
        /// 批量修改订单状态
        /// </summary>
        /// <param name="OrdersNumber">订单编号列表</param>
        /// <param name="OrderStatus">订单状态</param>
        /// <returns></returns>
        public static bool BatchUpdateStatus(string IdList, int OrderStatus) {
            return OrdersInfoDal.BatchUpdateStatus(IdList, OrderStatus);
        }

        /// <summary>
        /// 修改订单物流
        /// </summary>
        /// <param name="OrdersNumber">订单编号</param>
        /// <param name="LogisticsId">物流编号</param>
        /// <returns></returns>
        public static bool UpdateLogistics(string OrdersNumber, int LogisticsId) {
            return OrdersInfoDal.UpdateLogistics(OrdersNumber, LogisticsId);
        }

        /// <summary>
        /// 根据订单编号列表修改订单物流
        /// </summary>
        /// <param name="IdList">订单编号列表</param>
        /// <param name="LogisticsId">物流编号</param>
        /// <returns></returns>
        public static bool UpdateLogisticsByIdList(string IdList, int LogisticsId) {
            return OrdersInfoDal.UpdateLogisticsByIdList(IdList, LogisticsId);
        }

        /// <summary>
        /// 修改订单是否打印发货单
        /// </summary>
        /// <param name="OrdersNumber">订单编号</param>
        /// <param name="Invoice">是否打印发货单</param>
        /// <returns></returns>
        public static bool UpdateInvoice(string OrdersNumber, bool Invoice) {
            return OrdersInfoDal.UpdateInvoice(OrdersNumber, Invoice);
        }

        /// <summary>
        /// 合并订单
        /// </summary>
        /// <param name="OrdersNumber">指定合并基准订单编号，以该订单编号为准，其他订单合并到该订单中</param>
        /// <param name="OrderNumberList">需要合并的订单编号列表</param>
        /// <param name="count">需要合并的总订单数</param>
        /// <returns>Json格式Status:状态,Msg描述</returns>
        public static string Update(string OrdersNumber, string OrderNumberList, int count) {
            return OrdersInfoDal.Update(OrdersNumber, OrderNumberList, count);
        }
    }
}
